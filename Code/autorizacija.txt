insert into users(id, username, password)
values (1, 'bruce', 'wayne'), -- buyer
       (2, 'peter', 'security_rules'), -- x za testiranje, nema nijednu dozvolu
       (3, 'tom', 'guessmeifyoucan'), -- manager
        (4, 'santa', 'clause'); -- admin


1. ADD_COMMENT:

BACKEND - u commentController:

// autorizacija
 @PostMapping(value = "/comments", consumes = "application/json")
 @PreAuthorize("hasAuthority('ADD_COMMENT')")
 public ResponseEntity<Void> createComment(@RequestBody Comment comment, Authentication authentication) {

FRONTEND - u gift.html:
ne vidi ni formu ni dugme ako nema dozvolu

2. VIEW_GIFT_LIST:

BACKEND - u giftController:
// autorizacija
@GetMapping("/")
   @PreAuthorize("hasAuthority('VIEW_GIFT_LIST')")
   public String showSearch(Model model) {

// autorizacija
@GetMapping(value = "/api/gifts/search", produces = "application/json")
   @ResponseBody
   @PreAuthorize("hasAuthority('VIEW_GIFT_LIST')")
   public List<Gift> search(@RequestParam("query") String query) throws SQLException {
  
// autorizacija
@GetMapping("/gifts")
    public String showGift(@RequestParam(name = "id", required = false) String id, Model model, Authentication authentication) {
    boolean canSeeGifts = SecurityUtil.hasPermission("VIEW_GIFT_LIST");
    if(canSeeGifts == false) {
       return "redirect:/myprofile";
    }
	
FRONTEND - u gifts.html:
ne vidi naslov, formu za pretragu, tabelu ako nema dozvolu

FRONTEND - u layouts.html:
ne vidi gifts u meniju ako nema dozvolu

3. CREATE_GIFT:

BACKEND - u giftController:
// autorizacija
  @PostMapping("/gifts")
  @PreAuthorize("hasAuthority('CREATE_GIFT')")
  public String createGift(NewGift newGift) throws SQLException {
  
// autorizacija
  @GetMapping("/create-form")
  @PreAuthorize("hasAuthority('CREATE_GIFT')")
  public String CreateForm(Model model) {

FRONTEND - u gifts.html:
ne vidi link za dodavanje poklona ako nema dozvolu

4. VIEW_PERSONS_LIST:

BACKEND - u personsController:

// autorizacija
 @GetMapping("/persons")
 @PreAuthorize("hasAuthority('VIEW_PERSONS_LIST')")
  public String persons(Model model) {
  
// autorizacija
  @GetMapping(value = "/persons/search", produces = "application/json")
  @ResponseBody
  @PreAuthorize("hasAuthority('VIEW_PERSONS_LIST')")

FRONTEND - u persons.html:
ne vidi naslov, formu za pretragu, tabelu ako nema dozvolu

FRONTEND - u layouts.html:
ne vidi users u meniju ako nema dozvolu

5. VIEW_PERSON: - POPRAVITI

BACKEND - nema jer za get zahtev vraca http 403, pa ne ucitava stranicu

FRONTEND - u persons.html:
ne vidi link za detalje osobe

FRONTEND - u person.html: -obrisano
ne vidi glavni div ako nema dozvolu

6. UPDATE_PERSON:

7. VIEW_MY_PROFILE:


8. RATE_GIFT:

BACKEND - U ratingsController:
// autorizacija
  @PostMapping(value = "/ratings", consumes = "application/json")
  @PreAuthorize("hasAuthority('RATE_GIFT')")
  public String createOrUpdateRating(@RequestBody Rating rating, Authentication authentication) {

FRONTEND - u gift.html:
disable radio buttone, labele za ocenu i dugme za dodavanje ako nema dozvolu


9. BUY_GIFT:

BACKEND - U giftController:
// autorizacija
 @GetMapping("/buy-gift/{id}")
    @PreAuthorize("hasAuthority('BUY_GIFT')")
    public String showBuyCar(
	
	
// autorizacija
    @PostMapping("/gifts")
    @PreAuthorize("hasAuthority('CREATE_GIFT')")
    public String createGift(NewGift newGift) throws SQLException {
        List<Tag> tagList = this.tagRepository.getAll();
		
FRONTEND - u gift.html:
ne vidi link za kupovinu ako nema dozvolu




























